import java.text.SimpleDateFormat

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'com.bmuschko', name: 'gradle-tomcat-plugin', version: '2.5'
        classpath 'org.kordamp:markdown-gradle-plugin:1.2.0'
        classpath "mysql:mysql-connector-java:5.1.47"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.2.4"
}

flyway {
    url = 'jdbc:mysql://localhost:3399/sample_gradle?autoReconnect=true&useSSL=false'
    user = 'root'
    password = 'root'
}

ext {
    tomcatVersion = '9.0.10'
    mySQLVersion = '5.1.47'
    testReport = './build/reports/tests/test/classes'
    dbMigrate = './src/main/resources/db/migration'
}

// apply plugin: 'application'//Mainメソッドを持つクラスを実行するために必要
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'org.kordamp.markdown.convert'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'docker'

//静的解析コードのプラグイン
//apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'


sourceSets {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

// mainClassName = 'GradleMain.GradleMain'//Mainメソッドを持つクラスを実行するために必要

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "http://maven.seasar.org/maven2"
    }
}

dependencies {
    implementation 'net.arnx.jsonic:jsonic:1.2.0'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.2.0'

    //tomcat
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:9.0.0.M6"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: "org.eclipse.jdt.core.compiler", module: "ecj"
    }
    // MySQL
    implementation "mysql:mysql-connector-java:$mySQLVersion"

    //ロガー
    implementation('org.apache.logging.log4j:log4j-core:2.7')
    implementation('org.apache.logging.log4j:log4j-api:2.7')

    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.5')
    implementation('com.fasterxml.jackson.core:jackson-core:2.8.5')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.8.5')

}

jar {
    baseName = 'sample'
    archiveName = "${baseName}.jar"
}


tomcat() {
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol = 'org.apache.coyote.ajp.AjpNio2Protocol'
    //プロジェクト名(コンテキストパス)
    contextPath = 'Sample'
}

test {
    testLogging.showStandardStreams = true
}

findbugs {
    reportLevel = 'high'
    ignoreFailures = true
}

task sourcesJar(type: Jar){
    //タスクの設定
    baseName = "my-library"
    appendix = "sources"
    destinationDir = file("build")

    //アーカイブの構成
    from("src/main/java"){
        include "**/*.java", "**/*.groovy", "**/*.xml"
    }
    //マニフェストファイルの設定
    manifest{
        attributes("Built-By": "Gradle", "Implementation-Version": project.version)
    }
}


task getLogAll doLast {
    def date = new Date()
    def format = new SimpleDateFormat('yyyy/MM/dd HH:mm:ss.SSS')
    def dateTime = format.format(date)


    File dir = new File("${testReport}")
    File[] files = dir.listFiles()
    for (int count = 0; count < files.length; count++) {
        File fileName = files[count]

        def name = fileName.getName()
        def text = file("${testReport}/"+name).text
        def testNames = []
        def durations = []
        def results = []
        int order = 0
        text.eachLine { line, no ->
            if (line.contains("<td class=") && order == 0) {
                String str = "${line}"
                int index = str.indexOf('>')
                int out = str.indexOf('</td>')
                testNames.add("${str.substring(index + 1, out)}")
                order = 1
                if (order == 1) return
            }
            if (line.contains("<td class=") && order == 1) {
                String str = "${line}"
                int index = str.indexOf('>')
                int out = str.indexOf('</td>')
                durations.add("${str.substring(index + 1, out)}")
                order = 2
                if (order == 2) return
            }
            if (line.contains("<td class=") && order == 2) {
                String str = "${line}"
                int index = str.indexOf('>')
                int out = str.indexOf('</td>')
                results.add("${str.substring(index + 1, out)}")
                order = 0
                if (order == 0) return
            }
        }

        def sort = []
        FileTree tree = fileTree("${dbMigrate}")
        tree.each {
            def line = it.name
            int index = line.indexOf('V')
            int out = line.indexOf('__')
            sort.add("${Integer.decode(line.substring(index + 1, out))}")
            println  sort
        }
        int nextMax = 0
        int max = 0
        for (String num : sort ){
            if (max < Integer.decode(num)) {
                max = Integer.decode(num)
            }
        }
        nextMax = max + 1
        File newFile = file("${dbMigrate}/V${nextMax}__insert_DB.sql")
        newFile.write('', 'UTF-8')
        FileWriter textFile = new FileWriter(newFile)
        PrintWriter pw = new PrintWriter(new BufferedWriter(textFile))
        for (int i = 0; i < testNames.size(); i++) {
            pw.print("INSERT INTO test_reports (test_name, duration, result, created_at) VALUES (")
            pw.print("'${testNames[i]}', ")
            pw.print("'${durations[i]}', ")
            pw.print("'${results[i]}', ")
            pw.println("'${dateTime}');")
        }
        pw.close()
    }
}